<?xml version="1.0" encoding="UTF-8"?>
<hazelcast xmlns="http://www.hazelcast.com/schema/config">

    <cluster-name>_CLUSTER_NAME_</cluster-name>

    <properties>
        <property name="hazelcast.discovery.enabled">true</property>
        <property name="hazelcast.logging.type">slf4j</property>
        <property name="hazelcast.operation.call.timeout.millis">30000</property>
        <property name="hazelcast.memcache.enabled">false</property>
        <property name="hazelcast.rest.enabled">false</property>
    </properties>

    <network>
        <port auto-increment="true" port-count="100">5701</port>
        <outbound-ports>
            <ports>0</ports>
        </outbound-ports>
        <join>
            <multicast enabled="false"/>
            <aws enabled="true">
                <connection-timeout-seconds>7</connection-timeout-seconds>
                <read-timeout-seconds>7</read-timeout-seconds>
                <connection-retries>4</connection-retries>
                <hz-port>5701-5702</hz-port>
                <tag-key>type</tag-key>
                <tag-value>_SERVICE_NAME_</tag-value>
            </aws>
            <tcp-ip enabled="false"/>
        </join>
        <interfaces enabled="true">
            <!-- this most likely corresponds to your vpc range -->
            <interface>_SUBNET_</interface>
        </interfaces>
        <ssl enabled="false"/>
        <socket-interceptor enabled="false"/>
        <symmetric-encryption enabled="false">
            <!--
               encryption algorithm such as
               DES/ECB/PKCS5Padding,
               PBEWithMD5AndDES,
               AES/CBC/PKCS5Padding,
               Blowfish,
               DESede
            -->
            <algorithm>PBEWithMD5AndDES</algorithm>
            <!-- salt value to use when generating the secret key -->
            <salt>thesalt</salt>
            <!-- pass phrase to use when generating the secret key -->
            <password>thepass</password>
            <!-- iteration count to use when generating the secret key -->
            <iteration-count>19</iteration-count>
        </symmetric-encryption>
    </network>

    <management-center scripting-enabled="false"/>
    <partition-group enabled="false"/>
    <executor-service name="default">
        <pool-size>16</pool-size>
        <!--Queue capacity. 0 means Integer.MAX_VALUE.-->
        <queue-capacity>0</queue-capacity>
    </executor-service>
    <queue name="default">
        <!--
            Maximum size of the queue. When a JVM's local queue size reaches the maximum,
            all put/offer operations will get blocked until the queue size
            of the JVM goes down below the maximum.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <max-size>0</max-size>
        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. 0 means no backup.
        -->
        <backup-count>1</backup-count>

        <!--
            Number of async backups. 0 means no backup.
        -->
        <async-backup-count>0</async-backup-count>

        <empty-queue-ttl>-1</empty-queue-ttl>
    </queue>
    <!--
        Default Hazelcast cache configuration for Openfire.
    -->
    <map name="default">
        <!--
           Data type that will be used for storing recordMap.
           Possible values:
           BINARY (default): keys and values will be stored as binary data
           OBJECT : values will be stored in their object forms
           NATIVE : values will be stored in non-heap region of JVM
        -->
        <in-memory-format>BINARY</in-memory-format>

        <!--
            Number of backups. If 1 is set as the backup-count for example,
            then all entries of the map will be copied to another JVM for
            fail-safety. 0 means no backup.
        -->
        <backup-count>1</backup-count>
        <!--
            Number of async backups. 0 means no backup.
        -->
        <async-backup-count>0</async-backup-count>
        <!--
            Can we read the local backup entries? Default value is false for
            strong consistency. Being able to read backup data will give you
            greater performance.
        -->
        <read-backup-data>true</read-backup-data>
        <!--
            Maximum number of seconds for each entry to stay in the map. Entries that are
            older than <time-to-live-seconds> and not updated for <time-to-live-seconds>
            will get automatically evicted from the map.
            Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
        -->
        <time-to-live-seconds>0</time-to-live-seconds>
        <!--
            Maximum number of seconds for each entry to stay idle in the map. Entries that are
            idle(not touched) for more than <max-idle-seconds> will get
            automatically evicted from the map. Entry is touched if get, put or containsKey is called.
            Any integer between 0 and Integer.MAX_VALUE. 0 means infinite. Default is 0.
        -->
        <max-idle-seconds>0</max-idle-seconds>
        <!--
            Valid values are:
            NONE (no eviction),
            LRU (Least Recently Used),
            LFU (Least Frequently Used).
            NONE is the default.
        -->
        <eviction eviction-policy="LRU" max-size-policy="PER_NODE" size="100000"/>
        <!--
            Maximum size of the map. When max size is reached,
            map is evicted based on the policy defined.
            Any integer between 0 and Integer.MAX_VALUE. 0 means
            Integer.MAX_VALUE. Default is 0.
        -->
        <!--
            When max. size is reached, specified percentage of
            the map will be evicted. Any integer between 0 and 100.
            If 25 is set for example, 25% of the entries will
            get evicted.
        -->
        <!--<eviction-percentage>25</eviction-percentage>-->
        <!--
            Minimum time in milliseconds which should pass before checking
            if a partition of this map is evictable or not.
            Default value is 100 millis.
        -->
        <!--<min-eviction-check-millis>100</min-eviction-check-millis>-->
        <!--
            While recovering from split-brain (network partitioning),
            map entries in the small cluster will merge into the bigger cluster
            based on the policy set here. When an entry merge into the
            cluster, there might an existing entry with the same key already.
            Values of these entries might be different for that same key.
            Which value should be set for the key? Conflict is resolved by
            the policy set here. Default policy is PutIfAbsentMapMergePolicy

            There are built-in merge policies such as
            com.hazelcast.map.merge.PassThroughMergePolicy; entry will be added if there is no existing entry for the key.
            com.hazelcast.map.merge.PutIfAbsentMapMergePolicy ; entry will be added if the merging entry doesn't exist in the cluster.
            com.hazelcast.map.merge.HigherHitsMapMergePolicy ; entry with the higher hits wins.
            com.hazelcast.map.merge.LatestUpdateMapMergePolicy ; entry with the latest update wins.
        -->
        <merge-policy>com.hazelcast.map.merge.PassThroughMergePolicy</merge-policy>
        <!--
            Near cache provides a local view of the clustered map, which is
            ideal for high-read caches. Each cluster member retains a local
            copy of entries retrieved from the distributed map. This reduces
            network load for caches that require frequent reads. However, if
            the	entries are updated frequently, there can be a performance
            penalty due to invalidations on the other cluster members.
        -->
        <near-cache>
            <eviction eviction-policy="LRU" max-size-policy="ENTRY_COUNT" size="1000"/>
            <time-to-live-seconds>0</time-to-live-seconds>
            <max-idle-seconds>600</max-idle-seconds>
            <invalidate-on-change>true</invalidate-on-change>
        </near-cache>
    </map>

    <multimap name="default">
        <backup-count>1</backup-count>
        <value-collection-type>SET</value-collection-type>
    </multimap>

    <list name="default">
        <backup-count>1</backup-count>
    </list>

    <set name="default">
        <backup-count>1</backup-count>
    </set>

    <cp-subsystem>
        <cp-member-count>0</cp-member-count>
        <semaphores>
            <semaphore>
                <name>default</name>
                <jdk-compatible>true</jdk-compatible>
                <initial-permits>0</initial-permits>
            </semaphore>
        </semaphores>
    </cp-subsystem>
    <cache name="default">
        <backup-count>1</backup-count>
        <async-backup-count>0</async-backup-count>
    </cache>

    <reliable-topic name="default">
        <read-batch-size>10</read-batch-size>
        <topic-overload-policy>BLOCK</topic-overload-policy>
        <statistics-enabled>true</statistics-enabled>
    </reliable-topic>

    <ringbuffer name="default">
        <capacity>10000</capacity>
        <backup-count>1</backup-count>
        <async-backup-count>0</async-backup-count>
        <time-to-live-seconds>30</time-to-live-seconds>
        <in-memory-format>BINARY</in-memory-format>
    </ringbuffer>

    <serialization>
        <portable-version>0</portable-version>
    </serialization>

    <!--  Partitioned Openfire caches without size/time limits (no eviction). -->

    <map name="opt-$cacheStats">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Client Session Info Cache">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Components Sessions">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Connection Managers Sessions">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Secret Keys Cache">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Validated Domains">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Disco Server Features">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Disco Server Items">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Incoming Server Sessions">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Sessions by Hostname">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Routing User Sessions">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Routing Components Cache">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Routing Users Cache">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Routing AnonymousUsers Cache">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Routing Servers Cache">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>
    <map name="Directed Presences">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
    </map>

    <!-- Caches with size and/or time limits (TTL) -->

    <map name="POP3 Authentication">
        <backup-count>1</backup-count>
        <time-to-live-seconds>3600</time-to-live-seconds>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="10000"/>
    </map>
    <map name="LDAP Authentication">
        <backup-count>1</backup-count>
        <time-to-live-seconds>7200</time-to-live-seconds>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="10000"/>
    </map>
    <map name="File Transfer">
        <backup-count>1</backup-count>
        <time-to-live-seconds>600</time-to-live-seconds>
        <eviction eviction-policy="LRU"/>
    </map>
    <map name="File Transfer Cache">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="10000"/>
        <time-to-live-seconds>600</time-to-live-seconds>
    </map>
    <map name="Javascript Cache">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="10000"/>
        <time-to-live-seconds>864000</time-to-live-seconds>
    </map>
    <map name="Entity Capabilities">
        <backup-count>1</backup-count>
        <time-to-live-seconds>172800</time-to-live-seconds>
        <eviction eviction-policy="LRU"/>
    </map>
    <map name="Entity Capabilities Users">
        <backup-count>1</backup-count>
        <time-to-live-seconds>172800</time-to-live-seconds>
        <eviction eviction-policy="LRU"/>
    </map>
    <map name="Favicon Hits">
        <backup-count>1</backup-count>
        <time-to-live-seconds>21600</time-to-live-seconds>
        <eviction eviction-policy="LRU"/>
    </map>
    <map name="Favicon Misses">
        <backup-count>1</backup-count>
        <time-to-live-seconds>21600</time-to-live-seconds>
        <eviction eviction-policy="LRU"/>
    </map>
    <map name="Last Activity Cache">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="10000"/>
        <time-to-live-seconds>21600</time-to-live-seconds>
    </map>
    <map name="Locked Out Accounts">
        <backup-count>1</backup-count>
        <time-to-live-seconds>900</time-to-live-seconds>
        <eviction eviction-policy="LRU"/>
    </map>
    <map name="Multicast Service">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="10000"/>
        <time-to-live-seconds>86400</time-to-live-seconds>
    </map>
    <map name="Offline Message Size">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <time-to-live-seconds>43200</time-to-live-seconds>
    </map>
    <map name="Offline Presence Cache">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <time-to-live-seconds>21600</time-to-live-seconds>
    </map>
    <map name="Privacy Lists">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <time-to-live-seconds>21600</time-to-live-seconds>
    </map>
    <map name="Remote Users Existence">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <time-to-live-seconds>600</time-to-live-seconds>
    </map>
    <map name="Remote Server Configurations">
        <backup-count>1</backup-count>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <time-to-live-seconds>1800</time-to-live-seconds>
    </map>

    <!-- These caches have size and/or time limits (idle) -->

    <map name="Group Metadata Cache">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <max-idle-seconds>3600</max-idle-seconds>
        <time-to-live-seconds>900</time-to-live-seconds>
    </map>
    <map name="Group">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <max-idle-seconds>3600</max-idle-seconds>
        <time-to-live-seconds>900</time-to-live-seconds>
    </map>
    <map name="Roster">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <max-idle-seconds>3600</max-idle-seconds>
        <time-to-live-seconds>21600</time-to-live-seconds>
    </map>
    <map name="User">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <max-idle-seconds>3600</max-idle-seconds>
        <time-to-live-seconds>1800</time-to-live-seconds>
    </map>

    <!-- These caches use a near-cache to improve read performance -->

    <map name="VCard">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <time-to-live-seconds>21600</time-to-live-seconds>
        <near-cache>
            <eviction eviction-policy="LRU" max-size-policy="ENTRY_COUNT" size="10000"/>
            <max-idle-seconds>1800</max-idle-seconds>
            <invalidate-on-change>true</invalidate-on-change>
        </near-cache>
    </map>
    <map name="Published Items">
        <backup-count>1</backup-count>
        <read-backup-data>true</read-backup-data>
        <eviction max-size-policy="PER_NODE" eviction-policy="LRU" size="100000"/>
        <time-to-live-seconds>900</time-to-live-seconds>
        <near-cache>
            <eviction eviction-policy="LRU" max-size-policy="ENTRY_COUNT" size="10000"/>
            <max-idle-seconds>60</max-idle-seconds>
            <invalidate-on-change>true</invalidate-on-change>
        </near-cache>
    </map>
</hazelcast>
